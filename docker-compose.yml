x-db-environment: &x-db-environment
  POSTGRES_SSL_MODE: "disable"
  POSTGRES_HOST: "auth-db"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "db"
  POSTGRES_PASSWORD: "sybau1234"
  POSTGRES_USER: "postgres"

x-backend-app-environment: &x-backend-app-environment # APPLICATION
  APP_NAME: "goon"
  APP_VERSION: "0.0.1"
  # HTTP
  HTTP_PORT: "8080"
  HTTP_USE_PREFORK_MODE: "false"
  # Logger
  LOG_LEVEL: "debug"
  LOG_PATH: "/logs/out.log"
  # Postgres
  PG_POOL_MAX: "2"
  PG_URL: "postgres://postgres:sybau1234@auth-db:5432/db"
  # Metrics
  METRICS_ENABLED: "true"
  # Swagger
  SWAGGER_ENABLED: "true"
  # Auth
  JWT_SECRET: "mysecretsybau"

services:
  auth-service:
    container_name: auth-service
    platform: linux/amd64
    build:
      context: ./services/auth
    environment:
      <<: *x-backend-app-environment
    volumes:
      - ./logs:/logs
    ports:
      - "8080:8080"
    depends_on:
      - auth-db
    networks:
      app_network:
        aliases:
          - auth.lvh.me

  auth-db:
    image: postgres:16.2-alpine
    environment:
      <<: *x-db-environment
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    ports:
      - "6543:5432"
    networks:
      app_network:
        aliases:
          - auth-db.lvh.me

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVER_ID: 1
    networks:
      app_network:

  kafka-1:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka-1
    container_name: kafka-1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29091, PLAINTEXT_HOST://localhost:9091
    networks:
      app_network:

  kafka-2:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka-2
    container_name: kafka-2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092, PLAINTEXT_HOST://localhost:9092
    networks:
      app_network:

  kafka-3:
    image: confluentinc/cp-server:7.7.1
    hostname: kafka-3
    container_name: kafka-3
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:29093, PLAINTEXT_HOST://localhost:9093
    networks:
      app_network:

  # Logs (ELK)
  filebeat:
    build:
      context: ./configs/filebeat
    container_name: filebeat
    command: filebeat -e -strict.perms=false
    volumes:
      - ./configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/go_app:ro
    depends_on:
      - logstash
      - elasticsearch
    networks:
      app_network:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.4
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      app_network:

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.4
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./configs/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./configs/logstash/config:/usr/share/logstash/config:ro
    depends_on:
      - elasticsearch
    networks:
      app_network:

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.4
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      app_network:
  
networks:
  app_network:
    external: false

volumes:
  auth_db_data:
  elasticsearch_data:
