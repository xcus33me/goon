// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../usecase/mocks_repo_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	entity "auth/internal/entity"
	repo "auth/internal/repo"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
	isgomock struct{}
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), user)
}

// FindByLogin mocks base method.
func (m *MockAuthRepo) FindByLogin(login string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", login)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin.
func (mr *MockAuthRepoMockRecorder) FindByLogin(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockAuthRepo)(nil).FindByLogin), login)
}

// UpdatePasswordByID mocks base method.
func (m *MockAuthRepo) UpdatePasswordByID(request *repo.UpdatePasswordRequest) (*repo.UpdatePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePasswordByID", request)
	ret0, _ := ret[0].(*repo.UpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePasswordByID indicates an expected call of UpdatePasswordByID.
func (mr *MockAuthRepoMockRecorder) UpdatePasswordByID(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByID", reflect.TypeOf((*MockAuthRepo)(nil).UpdatePasswordByID), request)
}

// MockAuthWebAPI is a mock of AuthWebAPI interface.
type MockAuthWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAuthWebAPIMockRecorder
	isgomock struct{}
}

// MockAuthWebAPIMockRecorder is the mock recorder for MockAuthWebAPI.
type MockAuthWebAPIMockRecorder struct {
	mock *MockAuthWebAPI
}

// NewMockAuthWebAPI creates a new mock instance.
func NewMockAuthWebAPI(ctrl *gomock.Controller) *MockAuthWebAPI {
	mock := &MockAuthWebAPI{ctrl: ctrl}
	mock.recorder = &MockAuthWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthWebAPI) EXPECT() *MockAuthWebAPIMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockAuthWebAPI) Notify() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify")
}

// Notify indicates an expected call of Notify.
func (mr *MockAuthWebAPIMockRecorder) Notify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockAuthWebAPI)(nil).Notify))
}
